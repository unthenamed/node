name: NodePay Bot Runner

on:
  workflow_dispatch:  # Manual trigger
  schedule:
    # Jalankan setiap 1 jam (sesuaikan dengan kebutuhan)
    - cron: '0 */1 * * *'
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - '**.md'
  pull_request:
    branches: [ main, master ]

jobs:
  run-bot:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp cloudscraper aiofiles

    - name: Create required files
      run: |
        # Buat direktori yang diperlukan
        mkdir -p proxies sessions logs
        
        # Buat tokens.txt dari secrets
        if [ -n "${{ secrets.NODEPAY_TOKENS }}" ]; then
          echo "${{ secrets.NODEPAY_TOKENS }}" > tokens.txt
          echo "✅ Tokens file created"
        else
          echo "⚠️  No tokens found in secrets, creating template..."
          echo "# Add your tokens here, one per line" > tokens.txt
          echo "# example_token_here" >> tokens.txt
        fi
        
        # Buat proxies.txt dari secrets (opsional)
        if [ -n "${{ secrets.NODEPAY_PROXIES }}" ]; then
          echo "${{ secrets.NODEPAY_PROXIES }}" > proxies.txt
          echo "✅ Proxies file created"
        else
          echo "ℹ️  No proxies provided, running without proxies"
          touch proxies.txt
        fi
        
        # List files untuk verifikasi
        echo "📁 Current directory structure:"
        ls -la
        echo "📄 Tokens file content:"
        cat tokens.txt | sed 's/./*/g'  # Mask tokens untuk security
        echo "📄 Proxies file content:"
        cat proxies.txt | head -n 3

    - name: Run NodePay Bot
      run: |
        echo "🚀 Starting NodePay Bot..."
        timeout 1800 python main.py || echo "⏰ Bot completed or timed out after 30 minutes"
      
      env:
        PYTHONUNBUFFERED: 1

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bot-logs-${{ github.run_id }}
        path: |
          logs/
          sessions/
        retention-days: 7
